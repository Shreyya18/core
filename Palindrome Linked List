Given the head of a singly linked list, return true if it is a palindrome or false otherwise.

Example 1:
Input: head = [1,2,2,1]
Output: true

Example 2:
Input: head = [1,2]
Output: false
----------------------------------------------------------------------------------------------------------------------------------
//brute tc=O(2n) sc=O(n)
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        stack<int>st;
        ListNode* mover=head;
        while(mover!=NULL){
            st.push(mover->val);
            mover=mover->next;
        }
        mover=head;
        while(mover!=NULL){
            if(mover->val!= st.top())
                return false;
            mover=mover->next;
            st.pop();
        }
        return true;
  }
};
---------------------------------------------------------------------------------------------------------------------------------
//optimal tc=O(n) sc=O(1)
class Solution {
public:
    bool isPalindrome(ListNode* head) {
           ListNode* fast=head;
        ListNode* slow=head;
        while(fast->next!=NULL && fast->next->next!=NULL){
            fast=fast->next->next;
            slow=slow->next;
        }
        ListNode* newHead=reverse(slow->next);
        
        ListNode* first=head;
        ListNode* second=newHead;
        while(second!=NULL){
            if(first->val!=second->val)
                return false;
            first=first->next;
            second=second->next;
        }
        return true;

    }
    ListNode* reverse(ListNode* head){
        if(head==NULL || head->next==NULL) return head;
        ListNode*  newH=reverse(head->next);
        ListNode* front=head->next;
        
        front->next=head;
        head->next=NULL;
        return newH;
    }
};
