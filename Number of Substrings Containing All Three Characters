Given a string s consisting only of characters a, b and c.
Return the number of substrings containing at least one occurrence of all these characters a, b and c.

Example 1:
Input: s = "abcabc"
Output: 10
Explanation: The substrings containing at least one occurrence of the characters a, b and c are "abc", "abca", "abcab", "abcabc", "bca", 
"bcab", "bcabc", "cab", "cabc" and "abc" (again). 

Example 2:
Input: s = "aaacb"
Output: 3
Explanation: The substrings containing at least one occurrence of the characters a, b and c are "aaacb", "aacb" and "acb". 

Example 3:
Input: s = "abc"
Output: 1
---------------------------------------------------------------------------------------------------------------------------------------
//brute   tc=O(n^2) sc=O(1)
class Solution {
public:
    int numberOfSubstrings(string s) {
        int n=s.length();
        int count=0;
        for(int i=0;i<n;i++){
            vector<int>freq(3,0);
            for(int j=i;j<n;j++){
                freq[s[j]-'a']++;
                if(freq[0]>0 && freq[1]>0 && freq[2]>0){
                    count++;
                }
            }
        }
        return count;
  }
};
---------------------------------------------------------------------------------------------------
//optimal  tc=O(n)  sc=(1)
class Solution {
public:
    int numberOfSubstrings(string s) {
            int left=0, count=0;
        int n=s.length();
        vector<int>freq(n,0);
        for(int right=0;right<n;right++){
            freq[s[right]-'a']++;

            while(freq[0]>0 && freq[1]>0 && freq[2]>0){
                count+=(n-right);

                freq[s[left]-'a']--;
                left++;
            }
        }
        return count;
    }
};
