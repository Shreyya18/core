Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. If target exists, 
then return its index. Otherwise, return -1.
You must write an algorithm with O(log n) runtime complexity.

Example 1:
Input: nums = [-1,0,3,5,9,12], target = 9
Output: 4
Explanation: 9 exists in nums and its index is 4

Example 2:
Input: nums = [-1,0,3,5,9,12], target = 2
Output: -1
Explanation: 2 does not exist in nums so return -1
----------------------------------------------------------------------------------------------------------------------------------------------
// iterative
class Solution {
public:
    int search(vector<int>& nums, int target) {
        int n=nums.size();
        int low=0, high=n-1;
        int idx;
        while(low<=high){
            int mid=(low+high)/2;
            if( nums[mid]==target){
                return mid;
                
            }
            else if(target>nums[mid])
                low=mid+1;
            else 
                high=mid-1;
        }
        return -1;
  }
};
--------------------------------------------------------------------------------------------
//recursive
class Solution {
public:
    int bs(vector<int>& nums,int l, int h,int t){
        if(l>h) return -1;
       int mid=(l+h)/2;
       if(t==nums[mid]) return mid;
       else if (t>nums[mid])
            return bs(nums,mid+1, h, t);
        return bs(nums,l,mid-1,t);
    
    }
    int search(vector<int>& nums, int target) {
          int n=nums.size();
        return bs(nums,0,n-1, target);
    }
};
