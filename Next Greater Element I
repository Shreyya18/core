The next greater element of some element x in an array is the first greater element that is to the right of x in the same array.
You are given two distinct 0-indexed integer arrays nums1 and nums2, where nums1 is a subset of nums2.
For each 0 <= i < nums1.length, find the index j such that nums1[i] == nums2[j] and determine the next greater element of nums2[j]
in nums2. If there is no next greater element, then the answer for this query is -1.
Return an array ans of length nums1.length such that ans[i] is the next greater element as described above.

Example 1:
Input: nums1 = [4,1,2], nums2 = [1,3,4,2]
Output: [-1,3,-1]
Explanation: The next greater element for each value of nums1 is as follows:
- 4 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.
- 1 is underlined in nums2 = [1,3,4,2]. The next greater element is 3.
- 2 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.

Example 2:
Input: nums1 = [2,4], nums2 = [1,2,3,4]
Output: [3,-1]
Explanation: The next greater element for each value of nums1 is as follows:
- 2 is underlined in nums2 = [1,2,3,4]. The next greater element is 3.
- 4 is underlined in nums2 = [1,2,3,4]. There is no next greater element, so the answer is -1.
-------------------------------------------------------------------------------------------------------------------------------------------------------
//brute  tc=O(n* m^2) sc=O(n)
class Solution {
public:
    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {
        vector<int>res;
        int n=nums1.size(), m=nums2.size();
        for(int i=0;i<n;i++){
        bool found=false;
            for(int j=0;j<m;j++){
                if(nums1[i]==nums2[j]){
                    for(int k=j+1;k<m;k++){
                        if(nums2[k]>nums1[i]){
                            res.push_back(nums2[k]);
                            found=true;
                            break;
                        }
                    }
                    if(!found){
                    res.push_back(-1);
                    }
                }
            }
        }
        return res;
  }
};
----------------------------------------------------------------------------------------------------
//optimal  tc=O(m+n) sc=O(n+m)
class Solution {
public:
    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {
        stack<int>st;
        unordered_map<int,int>mpp;
        vector<int>res;
        int n=nums1.size(), m=nums2.size();
        for(auto num: nums2){
            while(!st.empty() && st.top()<num){
                mpp[st.top()]=num;
                st.pop();
            }
            st.push(num);
        }
        while(!st.empty()){
            mpp[st.top()]=-1;
            st.pop();
        }

        for(auto num:nums1){
            // auto it=mpp.find(num);
            // if(it!=mpp.end()){
            //     res.push_back(it->second);
            // }
            if(mpp.find(num)!=mpp.end())
                res.push_back(mpp[num]);
        }
        return res;
    }
};
