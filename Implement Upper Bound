Given a sorted array arr[] and a number target, the task is to find the upper bound of the target in this given array.
The upper bound of a number is defined as the smallest index in the sorted array where the element is greater than the given number.
Note: If all the elements in the given array are smaller than or equal to the target, the upper bound will be the length of the array.

Example 1 :
Input:  arr[] = [2, 3, 7, 10, 11, 11, 25], target = 9
Output: 3
Explanation: 3 is the smallest index in arr[], at which element (arr[3] = 10) is larger than 9.

Example 2:
Input: arr[] = [2, 3, 7, 10, 11, 11, 25], target = 11
Output: 6
Explanation: 6 is the smallest index in arr[], at which element (arr[6] = 25) is larger than 11.

Example 3:
Input: arr[] = [2, 3, 7, 10, 11, 11, 25], target = 100
Output: 7
Explanation: As no element in arr[] is greater than 100, return the length of array.
-----------------------------------------------------------------------------------------------------------------------------
//brute using linear search
class Solution {
  public:
    int upperBound(vector<int>& arr, int target) {
        //code here
        int n=arr.size();
        for(int i=0;i<n;i++){
            if(arr[i]>target)
                return i;
        }
        return n;
  }
};
---------------------------------------------------------------------------------------------------
//optimal using binary search
class Solution {
  public:
    int upperBound(vector<int>& arr, int target) {
              int n=arr.size();
        int low=0,high=n-1;
        int ans=n;
        while(low<=high){
            int mid=(low+high)/2;
            if(arr[mid]>target){
                ans=mid;
                high=mid-1;
            }
            else{
                low=mid+1;
            }
        }
        return ans;
    }
};
--------------------------------------------------------------------------------------------------------------
class Solution {
  public:
    int upperBound(vector<int>& arr, int target) {
      int n=arr.size();
      int low = 0, high = n;
      while (low < high) {
        int mid = (high +low) / 2;
        if (arr[mid] > target) {
          high = mid; // Narrow down to the left half
        } 
        else {
          low = mid + 1; // Narrow down to the right half
        }
      }
      return low;
    }
};
