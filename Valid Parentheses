You're given a string 'S' consisting of "{", "}", "(", ")", "[" and "]" .
Return true if the given string 'S' is balanced, else return false.
For example:
'S' = "{}()".
There is always an opening brace before a closing brace i.e. '{' before '}', '(' before ').
So the 'S' is Balanced.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
bool isValidParenthesis(string s)
{
    // Write your code here.
        stack<char> stk;
       // int top=-1;
    for(int i=0;i<s.length();i++){
      if (s[i] == '{' || s[i] == '[' || s[i] == '(') {
        stk.push(s[i]);
      }
      else {

        if (!stk.empty() && ((s[i] == '}' && stk.top() == '{') ||
            (s[i] == ']' && stk.top() == '[') ||
            (s[i] == ')' && stk.top() == '('))) {
          stk.pop();
        } else
          return false;
      }
    }
    return stk.empty();
    }
