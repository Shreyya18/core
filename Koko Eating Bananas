Koko loves to eat bananas. There are n piles of bananas, the ith pile has piles[i] bananas. The guards have gone and will come back in h hours.
Koko can decide her bananas-per-hour eating speed of k. Each hour, she chooses some pile of bananas and eats k bananas from that pile. If the 
pile has less than k bananas, she eats all of them instead and will not eat any more bananas during this hour.
Koko likes to eat slowly but still wants to finish eating all the bananas before the guards return.
Return the minimum integer k such that she can eat all the bananas within h hours.

Example 1:
Input: piles = [3,6,7,11], h = 8
Output: 4

Example 2:
Input: piles = [30,11,23,4,20], h = 5
Output: 30

Example 3:
Input: piles = [30,11,23,4,20], h = 6
Output: 23
--------------------------------------------------------------------------------------------------------------------------------------------
//brute using for loop
class Solution {
public:
    int maxVal(vector<int>&p){
        int maxNo=INT_MIN;
        int n=p.size();
        for(int i=0;i<n;i++){
            maxNo=max(maxNo,p[i]);
        }
        return maxNo;
    }
    long long totalHour(vector<int>&p,int item){
        int n=p.size();
        long long t_hour=0;
        for(int i=0;i<n;i++){
            t_hour=t_hour+ceil((double)(p[i])/(double)(item));
        }
        return t_hour;
    }
    int minEatingSpeed(vector<int>& piles, int h) {
        int maxNo=maxVal(piles);
        for(int i=1;i<=maxNo;i++){
            long long totalHr=totalHour(piles,i);
            if(totalHr<=h)
                return i;
        }
        return maxNo;
    }
};
---------------------------------------------------------------------------------
//optimal using binary search
class Solution {
public:
    int maxVal(vector<int>&p){
      int maxVal(vector<int>& piles){
        int maxi=INT_MIN;
        int n=piles.size();
        for(int i=0;i<n;i++){
            maxi=max(maxi,piles[i]);
        }
        return maxi;
    }

    long long total_hour(vector<int>& piles,int mid){
        int n=piles.size();
        long long totalhr=0;
        for(int i=0;i<n;i++){
            totalhr=totalhr+ceil((double)(piles[i])/(double)(mid));
        }
        return totalhr;
    }

    int minEatingSpeed(vector<int>& piles, int h) {
        int maxi=maxVal(piles);
        int low=1,high=maxi;
        int ans=maxi;
        while(low<=high){
            int mid=(low+high)/2;
            long long totalhr=total_hour(piles,mid);
            if(totalhr<=h){
                ans=mid;
                high=mid-1;
            }
            else
                low=mid+1;
        }
        return low;
    }
};
