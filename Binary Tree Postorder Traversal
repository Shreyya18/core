Given the root of a binary tree, return the postorder traversal of its nodes' values.

Example 1:
Input: root = [1,null,2,3]
Output: [3,2,1]

Example 2:
Input: root = [1,2,3,4,5,null,8,null,null,6,7,9]
Output: [4,6,7,5,2,9,8,3,1]

Example 3:
Input: root = []
Output: []

Example 4:
Input: root = [1]
Output: [1]
------------------------------------------------------------------------------------------------------------------------
//tc=O(n) sc=O(n)
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int>res;
        postOrder(root, res);
        return res;
    }
    void postOrder(TreeNode* root, vector<int>& res){
        if(root==NULL)
            return;
        
        postOrder(root->left,res);
        postOrder(root->right, res);
        res.push_back(root->val);

    }
};
--------------------------------------------------------------------------------------------------------
//iterative using 2 stacks   tc=O(2n) sc=O(2n)
class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
            vector<int>res;
        stack<TreeNode*> st1, st2;
        if(root==NULL)
            return res;
        st1.push(root);
        while(!st1.empty()){
            root=st1.top();
            st1.pop();
            st2.push(root);

            if(root->left!=NULL)
                st1.push(root->left);
            
            if(root->right!=NULL)
                st1.push(root->right);

        }

        while(!st2.empty()){
            res.push_back(st2.top()->val);
            st2.pop();
        }
        return res;
    }
};
--------------------------------------------------------------------------------------------------------------------------------
//using 1 stack  tc=O(n) sc=O(n)
class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int>res;
        stack<TreeNode*>st;
        TreeNode* cur=root;
        while(cur!=NULL || !st.empty()){
            if(cur!=NULL){
                st.push(cur);
                cur=cur->left;
            }

            else{
                TreeNode* temp=st.top()->right;
                if(temp==NULL){
                    temp=st.top();
                    st.pop();
                    res.push_back(temp->val);
                    while(!st.empty() && temp==st.top()->right){
                        temp=st.top();
                        st.pop();
                        res.push_back(temp->val);
                    }
                }
                else{
                    cur=temp;
                }
            }
        }
        return res;
    }
};
