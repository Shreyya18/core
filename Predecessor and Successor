You are given the root of a BST and an integer key. You need to find the inorder predecessor and successor of the given key. 
If either predecessor or successor is not found, then set it to NULL.
Note: In an inorder traversal the number just smaller than the target is the predecessor and the number just greater than the target is the successor. 

Example 1 :
Input: root = [50, 30, 70, 20, 40, 60, 80], key = 65
Output: [60, 70]
Explanation: In the given BST the inorder predecessor of 65 is 60 and inorder successor of 65 is 70.

Example 2:
Input: root = [8, 1, 9, N, 4, N, 10, 3], key = 8
Output: [4, 9]
Explanation: In the given BST the inorder predecessor of 8 is 4 and inorder successor of 8 is 9.
-------------------------------------------------------------------------------------------------------------------------------------------
//brute check website 
----------------------------------------------------------------------------------------------------------------------------------
//better tc=O(n) sc=O(1)
/* BST Node
class Node {
   public:
    int data;
    Node *left;
    Node *right;

    Node(int x){
        data = x;
        left = NULL;
        right = NULL;
    }
};
*/

class Solution {
  public:
    vector<Node*> findPreSuc(Node* root, int key) {
        // code here
        Node* pre=findPre(root, key);
        Node* suc=findSuc(root,key);
        return {pre,suc};
    }
    
    Node* findPre(Node* root, int key){
         Node* floor=NULL;
            while(root){
                
                // if(key==root->data){
                //     floor=root;
                //     return floor;
                // }
                if(root->data<key){
                    floor=root;
                    root=root->right;
                }
                else{
                    root=root->left;
                }
            }
            return floor;
    }
    
    Node* findSuc(Node* root, int key){
        Node* ceil=NULL;
        while(root){
            if(root->data>key){
                ceil=root;
                root=root->left;
            }
            else{
                root=root->right;
            }
        }
        return ceil;
    }
};
