Given the root of a binary search tree and an integer k, return true if there exist two elements in the BST 
such that their sum is equal to k, or false otherwise.

Example 1:
Input: root = [5,3,6,2,4,null,7], k = 9
Output: true

Example 2:
Input: root = [5,3,6,2,4,null,7], k = 28
Output: false
-------------------------------------------------------------------------------------------------------------------------
//brute tc=O(n+n) sc=O(n)
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool findTarget(TreeNode* root, int k) {
        vector<int>arr;
        inorder(root,arr);
        int left=0, right=arr.size()-1;
        while(left<right){
            int sum=arr[left]+arr[right];

            if(sum==k)
                return true;
            else if(sum>k)
                right--;
            else
                left++;
        }
        return false;
        
    }
    void inorder(TreeNode* root, vector<int>& arr){
        if(root==NULL)
            return;
        inorder(root->left, arr);
        arr.push_back(root->val);
        inorder(root->right, arr);
    }
        

};
