Given the root of a binary search tree, and an integer k, return the kth smallest value (1-indexed) of all the values of the nodes in the tree.

Example 1:
Input: root = [3,1,4,null,2], k = 1
Output: 1

Example 2:
Input: root = [5,3,6,2,4,null,null,1], k = 3
Output: 3
------------------------------------------------------------------------------------------------------------------------------------------------------------
//brute  tc=O(n) sc=O(n)
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int kthSmallest(TreeNode* root, int k) {
       vector<int>res;
       inorder(root, res);

       return res[k-1];
        
    }
    void inorder(TreeNode* root, vector<int>&res){
        if(root==NULL)
            return;
        inorder(root->left, res);
        res.push_back(root->val);
        inorder(root->right, res);
    }
};
---------------------------------------------------------------------------------------
//optimal tc=O(n) sc=O(1)
class Solution {
public:
    int kthSmallest(TreeNode* root, int k) {
        int res=INT_MIN;
        int count=0;
         inorder(root,k, count,res);
         return res;
    }

    void inorder(TreeNode* root, int k, int& count, int & res){ 

    //count should also '&', otherwise for each recursive call count will start with 0

        if(root==NULL || count>=k)
            return ;
        inorder(root->left, k,count,res);
        count++;
        if(count==k){
            res= root->val;
            return;
   
        }
        inorder(root->right, k, count,res);
    }
};
--------------------------------------------------------------
for kth largest element call 'root->right' first
void reverseInorder(TreeNode* node, int& counter, int k, int& kLargest) {
        if (node==NULL || counter >= k) return;

        // Traverse right subtree
        reverseInorder(node->right, counter, k, kLargest);

        // Increment counter after
        // visiting right subtree
        counter++;

        // Check if current node
        // is the Kth largest
        if (counter == k) {
            kLargest = node->val;
            return;
        }

        // Traverse left subtree if
        // Kth largest is not found yet
        reverseInorder(node->left, counter, k, kLargest);
    }
