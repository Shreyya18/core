Given a string s, sort it in decreasing order based on the frequency of the characters. The frequency of a character is the number of times it appears in the string.
Return the sorted string. If there are multiple answers, return any of them.

Example 1:
Input: s = "tree"
Output: "eert"
Explanation: 'e' appears twice while 'r' and 't' both appear once.
So 'e' must appear before both 'r' and 't'. Therefore "eetr" is also a valid answer.

Example 2:
Input: s = "cccaaa"
Output: "aaaccc"
Explanation: Both 'c' and 'a' appear three times, so both "cccaaa" and "aaaccc" are valid answers.
Note that "cacaca" is incorrect, as the same characters must be together.

Example 3:
Input: s = "Aabb"
Output: "bbAa"
Explanation: "bbaA" is also a valid answer, but "Aabb" is incorrect.
Note that 'A' and 'a' are treated as two different characters.
--------------------------------------------------------------------------------------------------------------------------------------------------------
//brute  tc= O(n+ klogk) where n= sizeof string , k= sizeof unique elements ... sc=O(k+n)
class Solution {
public:
    string frequencySort(string s) {
        int n=s.size();
        string result="";
        map<char,int>mpp;
        for(int i=0;i<n;i++){
            mpp[s[i]]++;
        }
        vector<pair<char,int>>pair_s(mpp.begin(), mpp.end());
        sort(pair_s.begin(), pair_s.end(), [](auto &a, auto &b){
            return a.second> b.second;
        });

        for(auto it: pair_s){
            int i=0;
            while(i<it.second){
                result+=it.first;
                i++;
            }
        }
        return result;
    }
};
--------------------------------------------------------------------------------------------
learn optimized approach also (using bucket sort)
