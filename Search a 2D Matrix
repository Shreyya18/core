You are given an m x n integer matrix matrix with the following two properties:
Each row is sorted in non-decreasing order.
The first integer of each row is greater than the last integer of the previous row.
Given an integer target, return true if target is in matrix or false otherwise.
You must write a solution in O(log(m * n)) time complexity.

Example 1:
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true

Example 2:
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13
Output: false
--------------------------------------------------------------------------------------------------------------------------
//brute
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
         int m=matrix.size(), n=matrix[0].size();
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(matrix[i][j]==target)
                    return true;
            }
        }
        return false;
    }
};
-------------------------------------------------------------------------------------------
//better
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
          int m=matrix.size(), n=matrix[0].size();
        for(int i=0;i<m;i++){
            if(findTarget(matrix[i], n, target)==true)
                return true; 
        }
        return false;
    }
you can reduce the complexity to O(n+logn) check it
    bool findTarget(vector<int>& matrix, int n, int target){
        int low=0, high=n-1;
        while(low<=high){
            int mid=(low+high)/2;
            if(matrix[mid]==target)
                return true;
            else if(matrix[mid]<target)
                low=mid+1;
            else 
                high=mid-1;

        }
        return false;
  }
};
----------------------------------------------------------------------------------------------------------
//optimal flatten 2d array into 1d without actually flattening, just make assumption by just taking high=m*n-1
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
      
            int m=matrix.size(), n=matrix[0].size();
            int low=0,high=m*n-1;
            while(low<=high){
                int mid=(low+high)/2;
                int rows=mid/n;
                int cols=mid%n;
                if(matrix[rows][cols]==target)
                    return true;
                else if(matrix[rows][cols]>target)
                    high=mid-1;
                else
                    low=mid+1;
            }
            return false;

    }
};
 

