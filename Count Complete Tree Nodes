Given the root of a complete binary tree, return the number of the nodes in the tree.
According to Wikipedia, every level, except possibly the last, is completely filled in a complete
binary tree, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.
Design an algorithm that runs in less than O(n) time complexity.

Example 1:
Input: root = [1,2,3,4,5,6]
Output: 6

Example 2:
Input: root = []
Output: 0

Example 3:
Input: root = [1]
Output: 1
-----------------------------------------------------------------------------------------------------------------------------------------------
//brute using level order  tc=O(n) sc=O(n)
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */


class Solution {
public:
    int countNodes(TreeNode* root) {
        queue<TreeNode*> q;
        if(root==NULL)
            return NULL;
        q.push(root);
        int count=0;
        while(!q.empty()){
            int size=q.size();
            for(int i=0;i<size;i++){
                TreeNode* node=q.front();
                q.pop();
                count++;
                if(node->left)
                    q.push(node->left);
                if(node->right)
                    q.push(node->right);
            }
        }
        return count;
        
    }
};
--------------------------------------------------------------------------------------------------------------
//recursive tc=O(n) sc=O(n)
class Solution {
public:
    int countNodes(TreeNode* root) {
        int count=0;
        countNodes(root, count);
        return count;

    }
    void countNodes(TreeNode* root, int& count){
        if(root==NULL)
            return;
        count++;
        countNodes(root->left, count);
        countNodes(root->right, count);
    }
};
------------------------------------------------------------------------------------------------------------------
//optimal  tc=O(logn*logn) calculating left height (logn) and right height O(logn)  sc=O(n) 
class Solution {
public:
    int countNodes(TreeNode* root) {
        if(root==NULL)
            return 0;
        int lh=leftHeight(root);
        int rh=rightHeight(root);

        if(lh==rh){
            return (1<<lh)-1;
        }

        return 1+countNodes(root->left)+countNodes(root->right);
    }

    int leftHeight(TreeNode* root){
        int height=0;
        while(root){
            height++;
            root=root->left;
        }
        return height;
    }

    int rightHeight(TreeNode* root){
        int height=0;
        while(root){
            height++;
            root=root->right;
        }
        return height;
    }
};
