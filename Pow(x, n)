Implement pow(x, n), which calculates x raised to the power n (i.e., xn).

Example 1:

Input: x = 2.00000, n = 10
Output: 1024.00000
Example 2:

Input: x = 2.10000, n = 3
Output: 9.26100
Example 3:

Input: x = 2.00000, n = -2
Output: 0.25000
Explanation: 2-2 = 1/22 = 1/4 = 0.25
-------------------------------------------------------------------------------------------------------------------------------
//brute  tc=O(n) sc=O(1)
class Solution {
public:
    double myPow(double x, int n) {
        double pow=1;
        if(n<0){
            n=n*(-1);
        for(int i=0;i<n;i++)
            pow=pow*x;
        pow= 1/pow;
        }
        else{
            for(int i=0;i<n;i++)
            pow=pow*x;
        }
            return pow;
      }
};
------------------------------------------------------------------------------------------------------------
//binary exponentiation  tc=O(logn) sc=O(1)
class Solution {
public:
    double myPow(double x, int n) {
           double ans=1.0;
        long long num=n;
        if(num<0) num=-1*num;
        while(num){
            if(num%2){
                ans=ans*x;
                num=num-1;
            }
            else{
                x=x*x;
                num=num/2;
            }
        }
        if(n<0)
            ans=1/ans;
        return ans;
    }
};
