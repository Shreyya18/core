Given the root of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.

Example 1:
Input: root = [1,2,3,null,5,null,4]
Output: [1,3,4]

Example 2:
Input: root = [1,2,3,4,null,null,null,5]
Output: [1,3,4,5]

Example 3:
Input: root = [1,null,3]
Output: [1,3]

Example 4:
Input: root = []
Output: []
--------------------------------------------------------------------------------------------------------------------------------------------------
//iterative using level order  tc=O(n) sc=O(n)
class Solution {
public:
    vector<int> rightSideView(TreeNode* root) {
        queue<TreeNode*>q;
        vector<int>res;
        if(root==NULL)
            return res;
        q.push(root);
        while(!q.empty()){
            int size=q.size();
            TreeNode* node;
            for(int i=0;i<size;i++){
                node=q.front();
                q.pop();

                if(node->left)
                    q.push(node->left);
                if(node->right)
                    q.push(node->right);
            }
            res.push_back(node->val);
        }
        return res;
    }
};
-------------------------------------------------------------------------------------------------------
//recursive tc=O(n) sc=O(height of tree)
class Solution {
public:
    vector<int> rightSideView(TreeNode* root) {
        vector<int>res;
        rightView(root,0, res);
        return res;
    }

    void rightView(TreeNode* root, int level, vector<int>& res){
        if(root==NULL)
            return;
        
        if(level==res.size())
            res.push_back(root->val);
        
        rightView(root->right, level+1, res);
        rightView(root->left, level+1, res);
    }

    
};
