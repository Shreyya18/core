Given an array arr containing both positive and negative integers, the task is to compute the length of the largest subarray that has a sum of 0.

Examples:
Input: arr[] = [15, -2, 2, -8, 1, 7, 10, 23]
Output: 5
Explanation: The largest subarray with a sum of 0 is [-2, 2, -8, 1, 7].

Input: arr[] = [2, 10, 4]
Output: 0
Explanation: There is no subarray with a sum of 0.

Input: arr[] = [1, 0, -4, 3, 1, 0]
Output: 5
Explanation: The subarray is [0, -4, 3, 1, 0].
------------------------------------------------------------------------------------------------------------------------------------------------------------
//brute
class Solution {
  public:
    int maxLen(vector<int>& arr) {
        code here
        int maxCount=0;
        int n=arr.size();
        for(int i=0;i<n;i++){
            for(int j=i;j<n;j++){
                int sum=0,count=0;
                for(int k=i;k<=j;k++){
                    sum=sum+arr[k];
                    count++;
                }
                if(sum==0)
                    maxCount=max(maxCount,count);
            }
        }
        return maxCount;
        
    }
};
-------------------------------------------------------------------------------------------------------------
//better
class Solution {
  public:
    int maxLen(vector<int>& arr) {
        int n=arr.size();
    map<int,int>mpp;
    int sum=0, maxCount=0;
    for(int i=0;i<n;i++){
        sum=sum+arr[i];
        if(sum==0)
            maxCount=i+1;
        else if(mpp.find(sum)!=mpp.end()){
            maxCount=max(maxCount,i-mpp[sum]);
        }
        else
        mpp[sum];
    }
    return maxCount;
    }
};
----------------------------------------------------------------------------------------------------------------
//optimal
class Solution {
  public:
    int maxLen(vector<int>& arr) {
        int n=arr.size();
    map<int,int>mpp;
    int sum=0, maxCount=0;
    for(int i=0;i<n;i++){
        sum=sum+arr[i];
        if(sum==0)
            maxCount=i+1;
        else if(mpp.find(sum)!=mpp.end()){
            maxCount=max(maxCount,i-mpp[sum]);
        }
        else
        mpp[sum]=i;
    }
    return maxCount;
    }
};
