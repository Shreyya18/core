Given the head of a linked list, remove the nth node from the end of the list and return its head.

Example 1:
Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]

Example 2:
Input: head = [1], n = 1
Output: []

Example 3:
Input: head = [1,2], n = 1
Output: [1]
------------------------------------------------------------------------------------------------------------------------------------------------
//brute  tc=O(count)+O(count-n) sc=O(1)
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        ListNode* mover=head;
        int count=0;
        while(mover!=NULL){
            count++;
            mover=mover->next;
        }
        if(count==n){
            ListNode* newHead=head->next;
            return newHead;
        }
        count=count-n;
        mover=head;
        while(mover!=NULL){
            count--;
            if(count==0)    
            break;
            mover=mover->next;
        }
        
        mover->next=mover->next->next;
        return head;
  }
};
------------------------------------------------------------------------------------------------------------------------
//optimal   tc=O(n) sc=O(1)
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
          ListNode* fast=head;
        ListNode* slow=head;
        for(int i=0;i<n;i++){
            fast=fast->next;
        }
        if(fast==NULL)     return head->next;
        while(fast!=NULL && fast->next!=NULL){
            fast=fast->next;
            slow=slow->next;
        }
        slow->next=slow->next->next;
        return head;
    }
};
