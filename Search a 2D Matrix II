Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:
Integers in each row are sorted in ascending from left to right.
Integers in each column are sorted in ascending from top to bottom.

Example 1:
Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5
Output: true

Example 2:
Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 20
Output: false
-----------------------------------------------------------------------------------------------------------------------------------------
//brute
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int m=matrix.size(), n=matrix[0].size();
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(matrix[i][j]==target)
                    return true;
            }
        }
        return false;
    }
};
----------------------------------------------------------------------------------------------------
//better
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int m=matrix.size(), n=matrix[0].size();
        for(int i=0;i<m;i++){
            if(findTarget(matrix[i],n,target)==true)
                return true;
        }
        return false;
    }
    bool findTarget(vector<int> matrix, int n, int target){
        int low=0,high=n-1;
        while(low<=high){
            int mid=(low+high)/2;
            if(matrix[mid]==target)
                return true;
            else if(matrix[mid]>target)
                high=mid-1;
            else
                low=mid+1;
        }
        return false;
    }
};
-----------------------------------------------------------------------------------
//optimal
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
          int m=matrix.size(), n=matrix[0].size();
    int row=0, col=n-1;
    while(row<m && col>=0){
        if(matrix[row][col]==target)
            return true;
        else if(matrix[row][col]>target)
            col--;
        else
            row++;
    }
    return false;
    }
};
 
