Given the head of a singly linked list, return the middle node of the linked list.
If there are two middle nodes, return the second middle node.

Example 1:
Input: head = [1,2,3,4,5]
Output: [3,4,5]
Explanation: The middle node of the list is node 3.

Example 2:
Input: head = [1,2,3,4,5,6]
Output: [4,5,6]
Explanation: Since the list has two middle nodes with values 3 and 4, we return the second one.
----------------------------------------------------------------------------------------------------------------------------------------------------
//brute  tc=O(n+(n/2)) sc=O(1)
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* middleNode(ListNode* head) {
        ListNode* mover=head;
        int count=0;
        while(mover!=NULL){
            count++;
            mover=mover->next;
        }
        count=(count/2)+1;
        int newCount=0;
        mover=head;
        while(mover!=NULL){
            newCount++;
            if(newCount==count) 
                break;
            mover=mover->next;
        }
        return mover;
  }
};
---------------------------------------------------------------------------------------------------------------
//optimal tc=O(n/2) sc=O(1)
class Solution {
public:
    ListNode* middleNode(ListNode* head) {
        ListNode* fast=head;
        ListNode* slow=head;
        while(fast!=NULL && fast->next!=NULL){
            /* the reason we are checking fast!=NULL because if we dont check and fast==NULL then the fast=fast->next  tries to access a member of a null pointer. */
            fast=fast->next->next;
            slow=slow->next;
        }
        return slow;
    
    }
};
