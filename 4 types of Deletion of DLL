// think of edge cases to in all 4 types
#include <iostream>
#include<bits/stdc++.h>
using namespace std;
//create a  new node doubly linked list(DLL)
struct Node{
    int val;
    Node* next;
    Node* back;
    Node(int val1, Node* next1, Node* back1){
        val=val1;
        next=next1;
        back=back1;
    }
    Node(int val1){
        val=val1;
        next=NULL;
        back=NULL;
    }
};

//convert an array to DLL 
Node* convertArraytoDLL(vector<int> &arr){
    Node* head=new Node(arr[0]);
    Node* mover=head;
    for(int i=1;i<arr.size();i++){
        Node* temp=new Node(arr[i]);
        mover->next=temp;
        temp->back=mover;
        mover=mover->next;
    }
    return head;
}

//traverse the entire DLL
void traverseDLL(Node* head){
    Node* temp=head;
    while(temp!=NULL){
        cout<<temp->val<<" ";
        temp=temp->next;
    }
}

//delete front node of DLL
Node* deleteFrontDLL(Node* head){
    Node* temp=head;
    head=head->next;
    temp->next=NULL;
    temp->back=NULL;
    free(temp);
    head->back=NULL;
return head;
}

//delete last node of DLL
Node* deleteEndDLL(Node* head){
    Node* temp=head;
    while(temp->next!=NULL){
        temp=temp->next;
    }
    Node* prev=temp->back;
    prev->next=NULL;
    temp->back=NULL;
    free(temp);
return head;
}

//delete the node at the given position
Node* deleteAtPos(Node* head, int pos){
    Node* temp=head;
    int count =0;
    if(temp==NULL || temp->next==NULL)
        return NULL;
    while(temp!=NULL){
        // Node* front=temp->next;
        count++;
        if(count==pos)
           break;
        temp=temp->next;
    }
           
        Node* prev=temp->back;
        Node* front=temp->next;
        if(prev==NULL && front->next==NULL)
            return NULL;
        else if(prev==NULL)
            return deleteFrontDLL(head);
        else if(front==NULL)
            return deleteEndDLL(head);
        else{
            prev->next=front;
            front->back=prev;
            
            temp->next=NULL;
            temp->back=NULL;
            free(temp);
        }
       
    return head;
}

//delete the node whose value is given
Node* deleteVal(Node* head, int val){
    Node* temp=head;
    while(temp!=NULL){
        if(temp->val==val)
            break;
        temp=temp->next;
    }
    Node* prev=temp->back;
    Node* front=temp->next;
    if(prev==NULL && front==NULL)
        return NULL;
    else if(prev==NULL)
        return deleteFrontDLL(head);
    else if(front==NULL)
        return deleteEndDLL(head);
    else{
        prev->next=front;
        front->back=prev;
        
        temp->next=NULL;
        temp->back==NULL;
        free(temp);
    }
    return head;
}
int main() {
//   Node* head=new Node(3);
    // cout<<head->val;
    vector<int> arr={1,2,3,1,4,6,3};
    Node* head=convertArraytoDLL(arr);
    head=deleteFrontDLL(head);
    head=deleteEndDLL(head);
    head=deleteAtPos(head, 5);
    head=deleteVal(head, 4);
    traverseDLL(head);
    return 0;
}
