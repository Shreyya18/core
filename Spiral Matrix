You are given a 2D matrix ‘MATRIX’ of ‘N’*’M’ dimension. You have to return the spiral traversal of the matrix.
Example:
Input:
MATRIX = [ [1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 60] ]
Output:
1 3 5 7 20 60 34 30 23 10 11 16
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include<bits/stdc++.h>
vector<int> spiralMatrix(vector<vector<int>>&MATRIX) {
    // Write your code here.
     int m = MATRIX.size();

    // Number of columns in the matrix
    int n = MATRIX[0].size();

    // Vector to store the spiral order elements
    vector<int> result;

    // Edge case: if matrix is empty
    if (m == 0)
        return result;

    // 2D vector to keep track of visited cells
    vector<vector<bool> > vis(m, vector<bool>(n, false));

    // Arrays to represent the four possible movement
    // directions: right, down, left, up

    // Change in row index for each direction
    int dr[] = { 0, 1, 0, -1 };

    // Change in column index for each direction
    int dc[] = { 1, 0, -1, 0 };

    // Initial position in the matrix
    int r = 0, c = 0;

    // Initial direction index (0 corresponds to 'right')
    int di = 0;

    // Iterate through all elements in the matrix
    for (int i = 0; i < m * n; ++i) {

        // Add current element to result vector
        result.push_back(MATRIX[r][c]);

        // Mark current cell as visited
        vis[r][c] = true;

        // Calculate the next cell coordinates based on
        // current direction
        int newR = r + dr[di];
        int newC = c + dc[di];

        // Check if the next cell is within bounds and not
        // visited
        if (0 <= newR && newR < m && 0 <= newC && newC < n
            && !vis[newR][newC]) {

            // Move to the next row
            r = newR;

            // Move to the next column
            c = newC;
        }
        else {

            // Change direction (turn clockwise)
            di = (di + 1) % 4;

            // Move to the next row according to new
            // direction
            r += dr[di];

            // Move to the next column according to new
            // direction
            c += dc[di];
        }
    }

    // Return the vector containing spiral order elements
    return result;

}
