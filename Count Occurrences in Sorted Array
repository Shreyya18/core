Given a sorted array, arr[] and a number target, you need to find the number of occurrences of target in arr[]. 

Example 1:
Input: arr[] = [1, 1, 2, 2, 2, 2, 3], target = 2
Output: 4
Explanation: target = 2 occurs 4 times in the given array so the output is 4.

Example 2:
Input: arr[] = [1, 1, 2, 2, 2, 2, 3], target = 4
Output: 0
Explanation: target = 4 is not present in the given array so the output is 0.

Example 3:
Input: arr[] = [8, 9, 10, 12, 12, 12], target = 12
Output: 3
Explanation: target = 12 occurs 3 times in the given array so the output is 3.
---------------------------------------------------------------------------------------------------------------------------------------
//brute using for loop
class Solution {
  public:
    int countFreq(vector<int>& arr, int target) {
        // code here
        int n=arr.size();
        int count=0;
        for(int i=0;i<n;i++){
            if(arr[i]==target)
                count++;
        }
        return count;
    }
};
---------------------------------------------------------------------------------------------
//optimal using binary search (find first and last occurence of number )
class Solution {
  public:
    int countFreq(vector<int>& arr, int target) {
      int n=arr.size();
        int first=bs_first(arr,target,n);
        if (first==-1) 
            return 0;

        int last=bs_last(arr,target,n);
        return (last-first)+1;

    }
    
    int bs_first(vector<int>arr,int target,int n){
        int low=0,high=n-1;
        int first=-1;
        while(low<=high){
            int mid=(low+high)/2;
            if(arr[mid]==target){
                first=mid;
                high=mid-1;
            }
            else if(arr[mid]<target)
                low=mid+1;
            else
                high=mid-1;
        }
        return first;
    }
    
    int bs_last(vector<int>arr,int target,int n){
        int low=0,high=n-1;
        int last=-1; 
        while(low<=high){
            int mid=(low+high)/2;
            if(arr[mid]==target){
                last=mid;
                low=mid+1;
            }
            else if(arr[mid]<target)
                low=mid+1;
            else
                high=mid-1;
        }
        return last;
    }
};
