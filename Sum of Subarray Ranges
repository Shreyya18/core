You are given an integer array nums. The range of a subarray of nums is the difference between the largest and smallest element in the subarray.
Return the sum of all subarray ranges of nums.
A subarray is a contiguous non-empty sequence of elements within an array.

Example 1:
Input: nums = [1,2,3]
Output: 4
Explanation: The 6 subarrays of nums are the following:
[1], range = largest - smallest = 1 - 1 = 0 
[2], range = 2 - 2 = 0
[3], range = 3 - 3 = 0
[1,2], range = 2 - 1 = 1
[2,3], range = 3 - 2 = 1
[1,2,3], range = 3 - 1 = 2
So the sum of all ranges is 0 + 0 + 0 + 1 + 1 + 2 = 4.

Example 2:
Input: nums = [1,3,3]
Output: 4
Explanation: The 6 subarrays of nums are the following:
[1], range = largest - smallest = 1 - 1 = 0
[3], range = 3 - 3 = 0
[3], range = 3 - 3 = 0
[1,3], range = 3 - 1 = 2
[3,3], range = 3 - 3 = 0
[1,3,3], range = 3 - 1 = 2
So the sum of all ranges is 0 + 0 + 0 + 2 + 0 + 2 = 4.

Example 3:
Input: nums = [4,-2,-3,4,1]
Output: 59
Explanation: The sum of all subarray ranges of nums is 59.
-----------------------------------------------------------------------------------------------------------------------------------
//brute  tc=O(n^3)  sc=O(1)
class Solution {
public:
    long long subArrayRanges(vector<int>& nums) {
        int n=nums.size();
        long long sum=0;
        for(int i=0;i<n;i++){
            for(int j=i;j<n;j++){
                int range=0;
                int minVal=INT_MAX, maxVal=INT_MIN;
                for(int k=i;k<=j;k++){
                    minVal=min(minVal, nums[k]);
                    maxVal=max(maxVal,nums[k]);
                    range=maxVal-minVal;
                }
                sum=sum+range;

            }
        }
        return sum;
  }
};
----------------------------------------------------------------------------------
//better tc=O(n^2) sc=O(1)
class Solution {
public:
    long long subArrayRanges(vector<int>& nums) {
          int n=nums.size();
        long long sum=0;
        for(int i=0;i<n;i++){
            int minVal=INT_MAX, maxVal=INT_MIN;
            int range=0;
            for(int j=i;j<n;j++){
                minVal=min(minVal,nums[j]);
                maxVal=max(maxVal,nums[j]);
                range=maxVal-minVal;
                sum=sum+range;
            }
        }
        return sum;
    }
};
------------------------------------------------------------------------------------------------
//optimal using monotonic stack tc=O(10n) => O(n)  sc=O(10n) => O(n)
class Solution {
public:
    long long subArrayRanges(vector<int>& nums) {
         return sumLargest(nums)-sumSmallest(nums);
    }

    long long sumSmallest(vector<int>& nums){
        long long MOD=1e9+7;
        vector<int>nse=findNSE(nums);
        vector<int>pse=findPSE(nums);
        long long total=0;
        for(int i=0;i<nums.size();i++){
            int left=i-pse[i];
            int right=nse[i]-i;

            long long freq=(left*right*1LL);
            long long val=(freq*nums[i]*1LL);
            total+=val;
        }
        return total;
    }
    vector<int>findNSE(vector<int>&nums){
        int n=nums.size();
        stack<int>st;
        vector<int>nse(n);
        for(int i=n-1;i>=0;i--){
            while(!st.empty() && nums[st.top()]>=nums[i]){
                st.pop();
            }
            nse[i]=st.empty()?n:st.top();
            st.push(i);

        }
        return nse;
    }

    vector<int>findPSE(vector<int>&nums){
        int n=nums.size();
        stack<int>st;
        vector<int>pse(n);
        for(int i=0;i<n;i++){
            while(!st.empty() && nums[st.top()]>nums[i]){
                st.pop();
            }
            pse[i]=st.empty()?-1:st.top();
            st.push(i);
        }
        return pse;
    }



    long long sumLargest(vector<int>& nums){
        long long MOD=1e9+7;
        vector<int>nge=findNGE(nums);
        vector<int>pge=findPGE(nums);
        long long total=0;
        for(int i=0;i<nums.size();i++){
            int left=i-pge[i];
            int right=nge[i]-i;
            long long freq=(left*right*1LL);
            long long val=(freq*nums[i]*1LL);
            total+=val;
        }
        return total;
    }

    vector<int>findNGE(vector<int>&nums){
        int n=nums.size();
        stack<int>st;
        vector<int>nge(n);
        for(int i=n-1;i>=0;i--){
            while(!st.empty() && nums[st.top()]<=nums[i]){
                st.pop();
            }
            nge[i]=st.empty()?n:st.top();
            st.push(i);

        }
        return nge;
    }
    vector<int>findPGE(vector<int>&nums){
        int n=nums.size();
        stack<int>st;
        vector<int>pge(n);
        for(int i=0;i<n;i++){
            while(!st.empty() && nums[st.top()]<nums[i]){
                st.pop();
            }
            pge[i]=st.empty()?-1:st.top();
            st.push(i);
        }
        return pge;
    }
};
