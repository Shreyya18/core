Given a binary array nums and an integer goal, return the number of non-empty subarrays with a sum goal.
A subarray is a contiguous part of the array.

Example 1:
Input: nums = [1,0,1,0,1], goal = 2
Output: 4
Explanation: The 4 subarrays are bolded and underlined below:
[1,0,1,0,1]
[1,0,1,0,1]
[1,0,1,0,1]
[1,0,1,0,1]

Example 2:
Input: nums = [0,0,0,0,0], goal = 0
Output: 15
------------------------------------------------------------------------------------------------------------------------------------------
//brute  tc=O(n^2) sc=O(1)
class Solution {
public:
    int numSubarraysWithSum(vector<int>& nums, int goal) {
        int n=nums.size();
        int count=0;
        for(int i=0;i<n;i++){
            int sum=0;
            for(int j=i;j<n;j++){
                sum+=nums[j];
                if(sum==goal)
                    count++;
                else if(sum>goal)
                    break;
            }
        }
        return count;
--------------------------------------------------------------------------------------------------------------------------------
//optimal
class Solution {
public:
    int numSubarraysWithSum(vector<int>& nums, int goal) {
         return atMost(nums,goal)- atMost(nums, goal-1);
    }

    int atMost(vector<int>nums, int goal){
    int left=0, count=0;
    int sum=0;
    if(goal<0)
        return 0;
    for(int right=0;right<nums.size();right++){
        sum+=nums[right];
        
        while(sum>goal){
            sum-=nums[left];
            left++;
        }
        count+=(right-left)+1;
    }
    return count;
    }
};
