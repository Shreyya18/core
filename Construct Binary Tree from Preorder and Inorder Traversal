Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and 
inorder is the inorder traversal of the same tree, construct and return the binary tree.
 
Example 1:
Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]
Output: [3,9,20,null,null,15,7]

Example 2:
Input: preorder = [-1], inorder = [-1]
Output: [-1]
-----------------------------------------------------------------------------------------------------------------------
// tc=O(n)  sc=O(n)
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        map<int,int>mpp;
        for(int i=0;i<inorder.size();i++){
            mpp[inorder[i]]=i;
        }

        TreeNode* root=createTree(preorder, 0, preorder.size()-1, inorder, 0, inorder.size()-1, mpp);
        return root;
    }

    TreeNode* createTree(vector<int>& preorder, int preStart, int preEnd, vector<int>& inorder, int inStart, int inEnd, map<int,int>&mpp){
        if(preStart>preEnd || inStart>inEnd)
            return NULL;
        TreeNode* root= new TreeNode(preorder[preStart]);

        int inorderRoot=mpp[root->val];
        int leftEle=inorderRoot-inStart;

        root->left=createTree(preorder,preStart+1, preStart+leftEle, inorder,inStart, inorderRoot-1,mpp);

        root->right=createTree(preorder,preStart+leftEle+1,preEnd, inorder,inorderRoot+1, inEnd, mpp);
        return root;
    }
};
