Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.
You must write an algorithm that runs in O(n) time.

Example 1:
Input: nums = [100,4,200,1,3,2]
Output: 4
Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.

Example 2:
Input: nums = [0,3,7,2,5,8,4,6,0,1]
Output: 9

Example 3:
Input: nums = [1,0,1,2]
Output: 3
-------------------------------------------------------------------------------------------------------------------------------------
//brute use ls inside the function  tc=O(n^2) sc=O(1)
//better sort the array first, cusing for loop check if ar[i]==ar[i]-1 ,  tc=O(nlong n)+O(n) sc=(1)
//optimal  tc=O(n)+(2n)=O(3n)  sc=O(n)
class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        unordered_set<int>st;      
        for(int i=0;i<nums.size();i++){
            st.insert(nums[i]);
        }
        int count=1, maxCount=0;
        for(auto it:st){
            int x=it;
            if(st.find(x-1)==st.end()){
                while(st.find(x+1)!=st.end()){
                    count++;
                    x++;
                }
                maxCount=max(maxCount,count);
                count=1;
            }
        }
        return maxCount;
    }
};
