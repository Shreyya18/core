Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.
If target is not found in the array, return [-1, -1].
You must write an algorithm with O(log n) runtime complexity.

Example 1:
Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]

Example 2:
Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]

Example 3:
Input: nums = [], target = 0
Output: [-1,-1]
-------------------------------------------------------------------------------------------------------------------------------------------
//brute using two for loop
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int n=nums.size();
        int start=-1,end=-1;
        for(int i=0;i<n;i++){
            if(nums[i]==target){
                start=i;
                break;
            }
        }
        for(int i=n-1;i>=0;i--){
            if(nums[i]==target){
                end= i;
                break;
            }
        }
        return {start,end};
  }
};
-----------------------------------------------------------------------------------------------------
//optimal by applying binary search twice
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
       int first=bs_first(nums, target);
        int last=bs_last(nums, target);
        return {first,last};
    }

    int bs_first(vector<int>& nums,int target){
        int n=nums.size();
        int low=0,high=n-1;
        int fir=-1;
        while(low<=high){
            int mid=(low+high)/2;
            if(nums[mid]==target){
                    fir=mid;
                    high=mid-1;
            }
            else if(nums[mid]<target)
                low=mid+1;
            else
                high=mid-1;
        }
        return fir;
    }

    int bs_last(vector<int>& nums,int target){
        int n=nums.size();
        int low=0,high=n-1;
        int last=-1;
        while(low<=high){
            int mid=(low+high)/2;
            if(nums[mid]==target){
                last=mid;
                low=mid+1;
            }
            else if(nums[mid]<target)
                low=mid+1;
            else
                high=mid-1;
        }
        return last;
    }
};
 
