Given an array of integers arr, find the sum of min(b), where b ranges over every (contiguous) subarray of arr. 
Since the answer may be large, return the answer modulo 109 + 7.

Example 1:
Input: arr = [3,1,2,4]
Output: 17
Explanation: 
Subarrays are [3], [1], [2], [4], [3,1], [1,2], [2,4], [3,1,2], [1,2,4], [3,1,2,4]. 
Minimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1.
Sum is 17.

Example 2:
Input: arr = [11,81,94,43,3]
Output: 444
-------------------------------------------------------------------------------------------------------------------------------------
//brute  tc=O(n^3) sc=O(1)
class Solution {
public:
    int sumSubarrayMins(vector<int>& arr) {
        const long long MOD=1e9+7;
        int n=arr.size();
        int sum=0;
        int minVal;
        for(int i=0;i<n;i++){
            for(int j=i;j<n;j++){
                minVal=INT_MAX;
                for(int k=i;k<=j;k++){
                    minVal=min(minVal, arr[k]);
                }
                sum=(sum+minVal)%MOD;
            }
        }
        return sum;
    }
};
-----------------------------------------------------------------------------------------------------------------------------------
//better  tc=O(n^2)  sc=O(1)
class Solution {
public:
    int sumSubarrayMins(vector<int>& arr) {
        const long long MOD=1e9+7;
        int n=arr.size();
        int sum=0;
        int minVal;
        for(int i=0;i<n;i++){
            minVal=INT_MAX;
            for(int j=i;j<n;j++){
                minVal=min(minVal, arr[j]);
                sum=(sum+minVal)%MOD;
            }
        }
        return sum;
    }
};
------------------------------------------------------------------------------------------------------
//optimal   tc=(5n) sc=(5n)
class Solution {
public:
    int sumSubarrayMins(vector<int>& arr) {
        vector<int> nse= findNSE(arr);
        vector<int> pse=findPSE(arr);
        int total=0;
        const long long MOD=1e9+7;
        int n=arr.size();
        for(int i=0;i<n;i++){
            int left=i-pse[i];
            int right=nse[i]-i;
            total=(total+(right*left%MOD)*arr[i]%MOD)%MOD;
        }

    return total;
    }

    vector<int>findPSE(vector<int>&arr){
        int n=arr.size();
        stack<int>st;
        vector<int>pse(n);
        for(int i=0;i<n;i++){
            while(!st.empty()&& arr[st.top()]>arr[i]){
                st.pop();
            }
            pse[i]=st.empty()?-1:st.top();
            st.push(i);
        }
        return pse;
    }

    vector<int>findNSE(vector<int>&arr){
        int n=arr.size();
        stack<int>st;
        vector<int>nse(n);
        for(int i=n-1;i>=0;i--){
            while(!st.empty() && arr[st.top()]>=arr[i]){
                st.pop();
            }
            nse[i]=st.empty()?n:st.top();
            st.push(i);
        }
        return nse;

    }
};
