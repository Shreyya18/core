Given a valid parentheses string s, return the nesting depth of s. The nesting depth is the maximum number of nested parentheses.

Example 1:
Input: s = "(1+(2*3)+((8)/4))+1"
Output: 3
Explanation:
Digit 8 is inside of 3 nested parentheses in the string.

Example 2:
Input: s = "(1)+((2))+(((3)))"
Output: 3
Explanation:
Digit 3 is inside of 3 nested parentheses in the string.

Example 3:
Input: s = "()(())((()()))"
Output: 3
----------------------------------------------------------------------------------------------------------------------------------------------
//brute   tc= O(n) sc=0(n)
class Solution {
public:
    int maxDepth(string s) {
        int n=s.size();
        stack<int>st;
        int maxDepth=0;
        for(int i=0;i<n;i++){
            if(s[i]=='('){
                st.push(s[i]);
                maxDepth=max(maxDepth, (int)st.size());
            }
            else if(s[i]==')'){
                st.pop();
            }
        }
        return maxDepth;
    }
};
-------------------------------------------------------------------------------
//optimal  tc=O(n) sc=O(1)

class Solution {
public:
    int maxDepth(string s) {
        int n=s.size();
        int count=0, maxCount=0;
        for(int i=0;i<n;i++){
            if(s[i]=='(')
                count++;
            else if(s[i]==')'){
                maxCount=max(maxCount,count);
                count--;
            }
        }
        return maxCount;
    }
};

 
