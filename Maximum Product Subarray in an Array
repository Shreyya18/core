Given an integer array nums, find a subarray that has the largest product, and return the product.
The test cases are generated so that the answer will fit in a 32-bit integer.

Example 1:
Input: nums = [2,3,-2,4]
Output: 6
Explanation: [2,3] has the largest product 6.

Example 2:
Input: nums = [-2,0,-1]
Output: 0
Explanation: The result cannot be 2, because [-2,-1] is not a subarray.
-----------------------------------------------------------------------------------------------------------------------------------------------
//brute
class Solution {
public:
    int maxProduct(vector<int>& nums) {
        int n=nums.size();
        int maxProduct=INT_MIN;
        for(int i=0;i<n;i++){
            for(int j=i+1;j<n;j++){
                int product=1;
                for(int k=i;k<=j;k++){
                    product=product*nums[k];
                }
                maxProduct=max(maxProduct, product);
            }
        }

        return maxProduct;
  }
};
-------------------------------------------------------------------------------------------------------------
//better
class Solution {
public:
    int maxProduct(vector<int>& nums) {
        int n=nums.size();
        int maxProduct=nums[0];
        for(int i=0;i<n;i++){
                int product=nums[i];
            for(int j=i+1;j<n;j++){
                
                maxProduct=max(maxProduct, product);
                    product=product*nums[j];
                }
                maxProduct=max(maxProduct, product);

        }
        return maxProduct;
  }
};
-----------------------------------------------------------------------------------------------------------------
//optimal
class Solution {
public:
    int maxProduct(vector<int>& nums) {
    int n=nums.size();
    int pre=1,suff=1;
    int maxProduct=INT_MIN;
      for(int i=0;i<n;i++){
          if(pre==0) pre=1;
          else if (suff==0) suff=1;
          pre=pre*nums[i];
          suff=suff*nums[n-i-1];

          maxProduct=max(maxProduct, max(pre,suff));
      }   
      return maxProduct;
    }
};
