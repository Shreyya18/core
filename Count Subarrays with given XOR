Given an array of integers arr[] and a number k, count the number of subarrays having XOR of their elements as k.

Example 1: 
Input: arr[] = [4, 2, 2, 6, 4], k = 6
Output: 4
Explanation: The subarrays having XOR of their elements as 6 are [4, 2], [4, 2, 2, 6, 4], [2, 2, 6], and [6]. Hence, the answer is 4.

Example 2:
Input: arr[] = [5, 6, 7, 8, 9], k = 5
Output: 2
Explanation: The subarrays having XOR of their elements as 5 are [5] and [5, 6, 7, 8, 9]. Hence, the answer is 2.

Example 3:
Input: arr[] = [1, 1, 1, 1], k = 0
Output: 4
Explanation: The subarrays are [1, 1], [1, 1], [1, 1] and [1, 1, 1, 1].
---------------------------------------------------------------------------------------------------------------------------------------------------------------
//brute
class Solution {
  public:
    long subarrayXor(vector<int> &arr, int k) {
        code here
        int n=arr.size(),count=0;
        for(int i=0;i<n;i++){
            for(int j=i;j<n;j++){
                int sum=0;
                for(int k=i;k<=j;k++){
                    sum=sum^arr[k];
                }
                if(sum==k)
                    count++;
            }
        }
        return count;
    }
};
---------------------------------------------------------------------------------------------------------------------------
//better
class Solution {
  public:
    long subarrayXor(vector<int> &arr, int k) {
        
        int n=arr.size(),count=0;
        for(int i=0;i<n;i++){
            int sum=0;
            for(int j=i;j<n;j++){
                sum=sum^arr[j];
                if(sum==k){
                    count++;
                }
            }
        }
        return count;
    }
};
-----------------------------------------------------------------------------------------------------------
//optimal

class Solution {
  public:
    long subarrayXor(vector<int> &arr, int k) {
     int n=arr.size();
    map<int,int>mpp;
    int xr=0;
    mpp[xr]++;
    int count =0;
    for(int i=0;i<n;i++){
        xr=xr^arr[i];
        int x=xr^k;
        count=count+mpp[x];
        mpp[xr]++;
    }
    return count;
    }
};
