Given a positive integer n, find the square root of n. If n is not a perfect square, then return the floor value.
Floor value of any number is the greatest Integer which is less than or equal to that number

Example 1:
Input: n = 4
Output: 2
Explanation: Since, 4 is a perfect square, so its square root is 2.

Example 2:
Input: n = 11
Output: 3
Explanation: Since, 11 is not a perfect square, floor of square root of 11 is 3.

Example 3:
Input: n = 1
Output: 1
------------------------------------------------------------------------------------------------------------------------------------------
//brute using for loop (linear search)
class Solution {
  public:
    int floorSqrt(int n) {
        // Your code goes here
        int ans;
        for(int i=1;i<=n;i++){
            if(i*i==n)
                return i;
            if(i*i<n)
                ans=i;
        }
        return ans;
    }
};
------or------
       int ans=0;
        for(int i=1;i<=n;i++){
            if(i*i<=n)
                ans=i;
            else
                break;
        }
        return ans;
        
----------------------------------------------------------------------------------------------
//optimal using built in sqrt
class Solution {
  public:
    int floorSqrt(int n) {
      return floor(sqrt(n));
    }
};
----------------------------------------------------------------------------------------------
//optimal using binary search
class Solution {
  public:
    int floorSqrt(int n) {
       int low=0,high=n;
        int ans;
        while(low<=high){
            int mid=(low+high)/2;
            if(mid*mid==n)
                return mid;
            if(mid*mid<n){
                ans=mid;
                low=mid+1;
            }
            else{
                high=mid-1;
            }
        }
        
        return ans;
        
    }
};
----------or----------------

    int floorSqrt(int n) {
       int low=0,high=n;
        int ans;
        while(low<=high){
            int mid=(low+high)/2;
            if(mid*mid<=n){
                low=mid+1;
            }
            else{
                high=mid-1;
            }
        }
        
        return high;
        
    }
};
      
