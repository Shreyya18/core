You are given a BST(Binary Search Tree) with n number of nodes and value x. your task is to find the greatest value node of the BST which is smaller than or equal to x.
Note: when x is smaller than the smallest node of BST then returns -1.

Example 1:

Input:
x = 87 n = 7        
                    2
                     \
                      81
                    /     \
                 42       87
                   \       \
                    66      90
                   /
                 45

Output: 87
Explanation: 87 is present in tree so floor will be 87.

Example 2:
Input:
x = 11 n = 4  
                          6
                           \
                            8
                          /   \
                        7       9

Output: 9

Example 3:
Input:
x = 5  n = 4                     
                          6
                           \
                            8
                          /   \
                        7       9
Output: -1
------------------------------------------------------------------------------------------------------------
// Function to search a node in BST.
class Solution {

  public:
    int floor(Node* root, int x) {
        // Code here
        int floor=-1;
        while(root){
            if(root->data==x){
                floor=root->data;
                return floor;
            }
            if(root->data<x){
                floor=root->data;
                root=root->right;
            }
            else{
                root=root->left;
            }
        }
        return floor;
    }
};
