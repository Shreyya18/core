Given a circular integer array nums (i.e., the next element of nums[nums.length - 1] is nums[0]), return the next greater number for every element in nums.
The next greater number of a number x is the first greater number to its traversing-order next in the array, which means you could search circularly to 
find its next greater number. If it doesn't exist, return -1 for this number.

Example 1:
Input: nums = [1,2,1]
Output: [2,-1,2]
Explanation: The first 1's next greater number is 2; 
The number 2 can't find next greater number. 
The second 1's next greater number needs to search circularly, which is also 2.

Example 2:
Input: nums = [1,2,3,4,3]
Output: [2,3,4,-1,4]
-------------------------------------------------------------------------------------------------------------------
//brute  tc=O(n^2) sc=O(n)
class Solution {
public:
    vector<int> nextGreaterElements(vector<int>& nums) {
        int n=nums.size();
        vector<int>res;
        for(int i=0;i<n;i++){
            bool found=false;
            for(int j=i+1;j<n;j++){
                if(nums[i]<nums[j]){
                    res.push_back(nums[j]);
                    found=true;
                    break;
                }
            }
            if(!found){
                for(int j=0;j<i;j++){
                    if(nums[i]<nums[j]){
                        res.push_back(nums[j]);
                        found=true;
                        break;
                    }
                }
            }
        
        if(!found){
        res.push_back(-1);
        }
        }
        return res;
  }
};
------------------------------------------------------------------------------------------------------------------------------
//better   tc=O(n^2) sc=O(n)
class Solution {
public:
    vector<int> nextGreaterElements(vector<int>& nums) {
         vector<int>res;
        int n=nums.size();
        for(int i=0;i<n;i++){
            bool found=false;
            for(int j=i+1;j<i+n;j++){
                int idx=j%n;
                if(nums[i]<nums[idx]){
                    res.push_back(nums[idx]);
                    found=true;
                    break;
                }
            }
            if(!found)
            {
                res.push_back(-1);
            }
        }
            return res;
    }
};
----------------------------------------------------------------------------------------------
//optimal   tc=O(n) sc=O(n)
class Solution {
public:
    vector<int> nextGreaterElements(vector<int>& nums) {
          stack<int>st;
        int n=nums.size();
        vector<int>res(n,-1 );
        for(int i=0;i<2*n;i++){
            int idx=i%n;
            while(!st.empty() &&  nums[st.top()]<nums[idx]){
                res[st.top()]=nums[idx];
                st.pop();
            }
            st.push(idx);
        }
        return res;
    }

};
