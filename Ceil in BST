You are given a root binary search tree and an integer x . Your task is to find the Ceil of x in the tree.
Note: Ceil(x) is a number that is either equal to x or is immediately greater than x.
If Ceil could not be found, return -1.

Example 1:
Input: root = [5, 1, 7, N, 2, N, N, N, 3], x = 3
Output: 3
Explanation: We find 3 in BST, so ceil of 3 is 3.

Example 2:
Input: root = [10, 5, 11, 4, 7, N, N, N, N, N, 8], x = 6
Output: 7
Explanation: We find 7 in BST, so ceil of 6 is 7.
-----------------------------------------------------------------------------------------------------------------
//optimal  tc=O(log2 N) sc=O(1)
class Solution {
  public:
    int findCeil(Node* root, int x) {
        // code here
        int ceil=-1;
        while(root){
            if(x==root->data){
                ceil=root->data;
                return ceil;
            }
            else if(root->data>x){
                ceil=root->data;
                root=root->left;
            }
            else{
                root=root->right;
            }
        }
        return ceil;
    }
};
