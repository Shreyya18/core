There is an integer array ‘A’ of size ‘N’.
A sequence is successive when the adjacent elements of the sequence have a difference of 1.
You must return the length of the longest successive sequence.
Note:
You can reorder the array to form a sequence. 

For example,
Input:
A = [5, 8, 3, 2, 1, 4], N = 6
Output:
5
Explanation: 
The resultant sequence can be 1, 2, 3, 4, 5.    
The length of the sequence is 5.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
//brute
 bool ls(vector<int>&a, int num){
     int n=a.size() ;
        for(int i=0;i<n;i++){
            if(a[i]==num)
                return true;
        }
        return false;
    }
int longestSuccessiveElements(vector<int>&a) {
    // Write your code here.
    
    int n=a.size(), maxCount=1;
    for(int i=0;i<n;i++){
        int count=1;
        int x=a[i];
        while(ls(a,x+1)==true){
            x=x+1;
            count++;
        }
        maxCount=max(maxCount,count);
        count=1;
    }
    return maxCount;
}
-----------------------------------------------------------------------------------------------------------
//optimal
int n=a.size(),count=1, maxCount=0;
    sort(a.begin(), a.end());
    for(int i=0;i<n-1;i++){
        if(a[i]==a[i+1]-1){
            count++;
            maxCount=max(maxCount,count);
        }
        else if(a[i]!=a[i+1])
            count=1;

    }
    return maxCount;
}
--------------------------------------------------------------------------------------------------------------
//optimal
int longestSuccessiveElements(vector<int>&a) {
    // Write your code here.
    int n=a.size(), maxCount=1,count=1;
    unordered_set<int>st;
    for(int i=0;i<n;i++){
        st.insert(a[i]);
    }

    for(auto it:st){
        int x=it;
        if(st.find(x-1)==st.end()){
            while(st.find(x+1)!=st.end()){
                count++;
                x=x+1;
            }
            maxCount=max(maxCount,count);
            count=1;
        }
    }
    return maxCount;
}
