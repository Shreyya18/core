Given string num representing a non-negative integer num, and an integer k, return the smallest possible integer after removing k digits from num.

Example 1:
Input: num = "1432219", k = 3
Output: "1219"
Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.

Example 2:
Input: num = "10200", k = 1
Output: "200"
Explanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.

Example 3:
Input: num = "10", k = 2
Output: "0"
Explanation: Remove all the digits from the number and it is left with nothing which is 0.
----------------------------------------------------------------------------------------------------------------------------------------------------------------
//optimal 
class Solution {
public:
    string removeKdigits(string num, int k) {
        int n=num.size();
        stack<char>st;
        string s="";
        for(int i=0;i<n;i++){
            while(!st.empty() && st.top()>num[i] && k>0){
                    st.pop();
                    k--;
            }

            st.push(num[i]);
        }
        while(!st.empty() && k>0 ){
            st.pop();
            k--;
        }

        if(st.empty())
            return "0";
        
        while(!st.empty()){
            s.push_back(st.top());
            st.pop();
        }

        while(s.size()>0 && s.back()=='0')
            s.pop_back();

        
        reverse(s.begin(), s.end());

        if(s.empty())     return "0";
        return s;
        
    }
};
