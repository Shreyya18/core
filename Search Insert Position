Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return 
the index where it would be if it were inserted in order. You must write an algorithm with O(log n) runtime complexity.

Example 1:
Input: nums = [1,3,5,6], target = 5
Output: 2

Example 2:
Input: nums = [1,3,5,6], target = 2
Output: 1

Example 3:
Input: nums = [1,3,5,6], target = 7
Output: 4
---------------------------------------------------------------------------------------------------------------------------------
//brute using linear search
class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        int n=nums.size();
        int ans=n;
        for(int i=0;i<n;i++){
            if(nums[i]>=target){
                ans=i;
                break;
            }
        }
        return ans;
    }
};
------------------------------------------------------------------------------------------
//optimal using binary search and upper bound
class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
       int n=nums.size();
        int low=0,high=n-1;
        int ans=n;
        while(low<=high){
            int mid=(low+high)/2;
            if(nums[mid]>=target){
                ans=mid;
                high=mid-1;
            }
            else{
                low=mid+1;
            }

        }
        return ans;
    }
};
